<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>40</y>
      <w>230</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>Jekyll::Site
--
source
dist
config
--
layouts
pages
static_files
drafts
baseurl
data
--
converters
generators
reader
--
regenerator
liquid_renderer
includes_load_paths</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>280</x>
      <y>70</y>
      <w>101</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>reset</panel_attributes>
    <additional_attributes/>
    <custom_code>int y=textHeight();

drawRectangleRound(0,0,width,height,20,20);

for(String textline : textlines) {
	y += printCenter(textline,y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>300</x>
      <y>100</y>
      <w>101</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>read</panel_attributes>
    <additional_attributes/>
    <custom_code>int y=textHeight();

drawRectangleRound(0,0,width,height,20,20);

for(String textline : textlines) {
	y += printCenter(textline,y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>320</x>
      <y>130</y>
      <w>101</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>generate</panel_attributes>
    <additional_attributes/>
    <custom_code>int y=textHeight();

drawRectangleRound(0,0,width,height,20,20);

for(String textline : textlines) {
	y += printCenter(textline,y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>340</x>
      <y>160</y>
      <w>101</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>render</panel_attributes>
    <additional_attributes/>
    <custom_code>int y=textHeight();

drawRectangleRound(0,0,width,height,20,20);

for(String textline : textlines) {
	y += printCenter(textline,y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>360</x>
      <y>190</y>
      <w>101</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>cleanup</panel_attributes>
    <additional_attributes/>
    <custom_code>int y=textHeight();

drawRectangleRound(0,0,width,height,20,20);

for(String textline : textlines) {
	y += printCenter(textline,y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>380</x>
      <y>220</y>
      <w>101</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>write</panel_attributes>
    <additional_attributes/>
    <custom_code>int y=textHeight();

drawRectangleRound(0,0,width,height,20,20);

for(String textline : textlines) {
	y += printCenter(textline,y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>400</x>
      <y>100</y>
      <w>411</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>Read Site data from disk and load it into internal data structures.
</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>420</x>
      <y>130</y>
      <w>191</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>Run each of the Generators.</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>440</x>
      <y>160</y>
      <w>231</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>Render the site to the destination.</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>460</x>
      <y>190</y>
      <w>391</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>Remove orphaned files and empty directories in destination.</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>480</x>
      <y>220</y>
      <w>231</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>Write static files, pages, and posts.</panel_attributes>
    <additional_attributes/>
    <custom_code>//This is a tutorial for a self resizing component 
//In addition you are able to resize at manually
//As soon as it is resized manually a new text is
//added to the property panel
setAutoresize(20,20,10);

int y=textHeight();

boolean center = true;
for(int i = 0; i &lt; textlines.size(); i++) {
	String textline = textlines.get(i);
	if(textline.equals("--")) {
		drawLineHorizontal((int) (y-textHeight()*0.7));
		center = false;
		if (!isManualResized()) height -= (int) (textHeight()*0.75);
		y += textHeight()*0.3;
	}
	else {
		if (center) y += printCenter(textline,y); 
		else y += printLeft(textline,y);
	}
}

</custom_code>
  </element>
</diagram>
